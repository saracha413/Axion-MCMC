Timer unit: 1e-06 s

Total time: 132.131 s
File: bottleneck_test.py
Function: mcmc at line 78

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    78                                           @profile
    79                                           #def mcmc(params, num_steps):
    80                                           def mcmc(num_burn_in, l_min, l_max, n_axion, log10_axion_ac, log10_fraction_axion_ac, omega_cdm, H0, num_steps):
    81                                               """
    82                                                     params = {'num_burn_in': l_min':   'l_max':  'n_axion':
    83                                                               log10_axion_ac':   'log10_fraction_axion_ac':  'omega_cdm':  'H0': }
    84                                               """
    85                                           
    86                                           
    87                                               #model_pars = read_ini_file('example_axiCLASS.ini', loc='/Users/saravannah/Axion-MCMC/axion_MCMC/')
    88                                               #model_pars['n_axion'] = n_axion
    89                                           
    90                                           
    91                                           
    92                                               #num_steps = params['num_steps']
    93                                               #num_burn_in = params['num_burn_in']
    94                                               #name = params['name']
    95                                               #l_min = params['l_min']
    96                                               #l_max = params['l_max']
    97                                               #model_pars = params['model_pars']
    98                                           
    99         1        766.0    766.0      0.0      model_pars = read_ini_file('example_axiCLASS.ini', loc='/Users/saravannah/Axion-MCMC/axion_MCMC/')
   100         1          2.0      2.0      0.0      model_pars['n_axion'] = n_axion
   101                                           
   102         1          2.0      2.0      0.0      log10_axion_ac = float(model_pars['log10_axion_ac'])
   103         1          2.0      2.0      0.0      log10_fraction_axion_ac = float(model_pars['log10_fraction_axion_ac'])
   104         1          2.0      2.0      0.0      omega_cdm = float(model_pars['omega_cdm'])
   105         1          2.0      2.0      0.0      H0 = float(model_pars['H0'])
   106                                           
   107                                           
   108         1         51.0     51.0      0.0      log10_axion_ac = np.random.normal(log10_axion_ac, abs(log10_axion_ac*0.1))
   109         1          9.0      9.0      0.0      log10_fraction_axion_ac = np.random.normal(log10_fraction_axion_ac, abs(log10_fraction_axion_ac*0.1))
   110         1          8.0      8.0      0.0      omega_cdm = np.random.normal(omega_cdm, abs(omega_cdm*0.05))
   111         1          7.0      7.0      0.0      H0 = np.random.normal(H0, abs(H0*0.1))
   112                                           
   113         1          2.0      2.0      0.0      start = time.time()
   114                                           
   115                                           
   116         1         33.0     33.0      0.0      directory = os.getcwd()
   117         1         14.0     14.0      0.0      fileName = os.path.join(directory,'planck/planck_tt_spectrum_2018.txt')
   118         1      61905.0  61905.0      0.0      _, Dl_data, _, _ = np.loadtxt(fileName, unpack = True)
   119         1          6.0      6.0      0.0      Dl_data = Dl_data[l_min-2:l_max-1] #truncation checked to match l_max and l_min
   120                                           
   121                                           
   122                                               #initiatiate
   123         1   12798845.0 12798845.0      9.7      l_model, Cl_model, Dl_model = get_power(model_pars, l_min, l_max)
   124                                           
   125                                               #outFile = name+'.txt'
   126                                           
   127         1        618.0    618.0      0.0      JSD_current = JSD(Dl_model, Dl_data)
   128         1          6.0      6.0      0.0      p_current = [model_pars['log10_axion_ac'], model_pars['log10_fraction_axion_ac'], model_pars['omega_cdm'], model_pars['H0']] #whatever params you're varying in MCMC
   129         1          9.0      9.0      0.0      stdDevs = [float(model_pars['log10_axion_ac'])*0.05, float(model_pars['log10_fraction_axion_ac'])*0.05, float(model_pars['omega_cdm'])*0.05, float(model_pars['H0'])*0.05] #standard deviation for params
   130         1         10.0     10.0      0.0      stdDevs = [abs(x) for x in stdDevs]
   131         1         21.0     21.0      0.0      stdDevs = [str(x) for x in stdDevs] #Python have trouble with type of data, recasting float to str
   132                                           
   133         1          3.0      3.0      0.0      sampling_result = []
   134         1        116.0    116.0      0.0      line = np.append(p_current, JSD_current)
   135         1         43.0     43.0      0.0      line = [float(x) for x in line] #Python have trouble with type of data, recasting str to float
   136         1          4.0      4.0      0.0      sampling_result.append(line)
   137                                           
   138         1         36.0     36.0      0.0      text = 'Chain # '+str(os.getpid())
   139                                           
   140        11      24916.0   2265.1      0.0      for t in tqdm(range(num_steps), desc = text, position=os.getpid()):
   141        10        664.0     66.4      0.0          signal.signal(signal.SIGALRM, handler)
   142        10        122.0     12.2      0.0          signal.alarm(30)
   143                                           
   144        10         28.0      2.8      0.0          try:
   145                                           
   146        10       1976.0    197.6      0.0              p_propose = np.random.normal(p_current, stdDevs)
   147                                                       ##reset params array
   148                                           
   149                                                       ####TO-DO: write this fxn to use whatever variable param you want. hard-coded for now
   150        10         69.0      6.9      0.0              model_pars['log10_axion_ac'] = p_propose[0]
   151        10         42.0      4.2      0.0              model_pars['log10_fraction_axion_ac'] = p_propose[1]
   152        10         38.0      3.8      0.0              model_pars['omega_cdm'] = p_propose[2]
   153        10         36.0      3.6      0.0              model_pars['H0'] = p_propose[3]
   154                                           
   155        10  119233493.0 11923349.3     90.2              l_propose, Cl_propose, Dl_propose = get_power(model_pars, l_min, l_max)
   156        10       5664.0    566.4      0.0              JSD_propose = JSD(Dl_propose, Dl_data)
   157        10         47.0      4.7      0.0              x = JSD_propose/JSD_current
   158                                           
   159        10        306.0     30.6      0.0              if x < 1+np.random.uniform():
   160        10         48.0      4.8      0.0                  p_current = p_propose
   161        10         37.0      3.7      0.0                  JSD_current = JSD_propose
   162                                           
   163                                                   except (ParamValueError, CosmoComputationError):
   164                                                       pass
   165                                           
   166                                                       #moving outside try block so **always** writes to file even if times out
   167        10         32.0      3.2      0.0          if t > num_burn_in:
   168         9        630.0     70.0      0.0              line = np.append(p_current, JSD_current)
   169         9        192.0     21.3      0.0              line = [float(x) for x in line] #Python have trouble with type of data, recasting str to float
   170         9         46.0      5.1      0.0              sampling_result.append(line)
   171                                           
   172                                           
   173                                                   #except ParamValueError:
   174                                                   #    line = np.append(p_current, JSD_current)
   175                                                   #    line = [float(x) for x in line] #Python have trouble with type of data, recasting str to float
   176                                                   #    sampling_result.append(line)
   177                                                   #    print('This step took too long! Skipping to next entry.')
   178                                                   #except CosmoComputationError: 
   179                                                   #    line = np.append(p_current, JSD_current)
   180                                                   #    line = [float(x) for x in line] #Python have trouble with type of data, recasting str to float
   181                                                   #    sampling_result.append(line)
   182                                                   #    print('AxiCLASS did not converge! Skipping to next entry.')
   183                                           
   184                                                   #if t%50 == 0: 
   185                                                   #    print('MCMC has completed ',t, ' steps.')
   186                                                   #time.sleep(0.05)
   187         1          7.0      7.0      0.0      end = time.time()
   188                                           
   189         1          3.0      3.0      0.0      return sampling_result
